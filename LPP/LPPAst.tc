%{ // cpp code
    #include <iostream>
    #include <sstream>     
    #include <iomanip>    
    #include <algorithm>  

    #include "LPPAst.hpp"
    

    SymbolVector vec;

	int offset = 4;
    int offsetNeg = 0;

	int getOffset(){
		
		return offset;
	}

	int addOffset()
	{
		offset += 4;
	}

    int addOffsetNeg()
    {
        offsetNeg += 4;
    }

    int getOffsetNeg()
    {
        return offsetNeg;
    }

    int label_counter = 0;

    std::string create_unique_label(void* address, std::string nombre) {
        label_counter++;
        std::string label = nombre + std::to_string(label_counter);
        return label;
    }

%}

%decls %{ // hpp code
    #include <string>
    #include <cmath>
    #include <unordered_map>
    #include "SemError.hpp"
    #include <vector>

    using stdstring = std::string;

    struct structElements {
        stdstring id;
        stdstring placeStack;
    };

    using SymbolVector = std::vector<structElements>;

%}

%option lang = "C++"


// NODOS.
%node AstNode %abstract %typedef = {
    %nocreate stdstring place;
    %nocreate stdstring code;
}

%node EmptyNode AstNode = {
}

// STATEMENT NODES.
%node Stmt AstNode %abstract

%node Program AstNode = {
    AstNode* stmts;
}

%node BlockStmt Stmt = {
    AstNode* stmt1;
    AstNode* stmt2;
}

%node InitialBlockStmt Stmt = {
    AstNode* stmt1;
    AstNode* stmt2;
    AstNode* stmt3;
}

%node AssignStmt Stmt = {
    AstNode *var;
    AstNode *rvalue;
}

%node PrintStmt Stmt = {
    AstNode *expr;
}

%node IfStmt Stmt = {
    AstNode *cond;
    AstNode *stmt_true;
    AstNode *stmt_false;
}

%node WhileStmt Stmt = {
    AstNode *cond;
    AstNode *stmt;
}

%node ForStmt Stmt = {
    AstNode *init;
    AstNode *limite;
    AstNode *stmt;
}

%node RepitaStmt Stmt = {
    AstNode *cond;
    AstNode *stmt;
}

%node DecVarStmt Stmt = {
    AstNode *var1;
    AstNode *var2;
}

%node LeaStmt Stmt = {
    AstNode *id;
}

%node IntDecl AstNode = {
    AstNode* var1;
    AstNode* var2;
}

%node BinaryExpr AstNode %abstract = {
    AstNode *expr1;
    AstNode *expr2;
}


%node AddExpr BinaryExpr
%node SubExpr BinaryExpr
%node MultExpr BinaryExpr
%node NotEqualExpr BinaryExpr
%node EqualExpr BinaryExpr
%node LessOrEqualExpr BinaryExpr
%node LessExpr BinaryExpr          
%node GreaterOrEqualExpr BinaryExpr 
%node GreaterExpr BinaryExpr
%node AndExpr BinaryExpr
%node OrExpr BinaryExpr
%node ModExpr BinaryExpr
%node DivExpr BinaryExpr

%node NumExpr AstNode = {
    int value;
}

%node IdentExpr AstNode = {
    stdstring text;
}

%node CaracterExpr AstNode = {
    stdstring caracter;
}

%node CadenaExpr AstNode = {
    stdstring cadena;
}

%node BooleanExpr AstNode = {
    int value;
}

// OPERACIONES.
%operation %virtual stdstring genProgramCode(AstNode *this) 

// Generación de código
genProgramCode(LeaStmt) {
    code += id->genProgramCode();
    code += "\n\n\tmov eax, 5";
    code += "\n\tint 0x80";
    code += "\n\tmov " + id->place + ", eax";
    return code;
}

genProgramCode(InitialBlockStmt) {
    code += stmt1->genProgramCode();
    code += stmt2->genProgramCode();
    code += stmt3->genProgramCode();

    return code;
}

genProgramCode(BlockStmt) {
    place = "dword[ebp - " + std::to_string(addOffsetNeg()) + "]";

    code += stmt1->genProgramCode();
    code += stmt2->genProgramCode();


    return code;
}

genProgramCode(AssignStmt) {
    bool found = false;

    for (auto& elem : vec) {
        if (elem.id == dynamic_cast<IdentExpr*>(var)->text) { 
            var->genProgramCode();
            found = true;
            place = elem.placeStack;
            // Aquí podría poner directamente lo otro y hacer el return.
            break;
        }
    }

    // Si la variable no se encontró, se añade una nueva entrada en el vector de símbolos
    if (!found) {
        throw SemError("Variable no declarada");
    }

    rvalue->genProgramCode();
    
    code += rvalue->code;
    code += "\n\n\t; AssignStmt ";
    code += "\n\tmov eax, " + rvalue->place;
    code += "\n\tmov " + var->place + ", eax";
    return code;
}

genProgramCode(PrintStmt) {
    bool found = false;
    int index = 0;
    std::stringstream ss;

    switch (expr->getKind()) {
        case NumExpr_kind:
            expr->genProgramCode();
            code += expr->code;
            code += "\n\tmov eax, 1\t";
            code += "\n\tmov ebx, " + expr->place + "\t";
            break;
        
        case IdentExpr_kind: 
            for (const auto& var : vec) {
                if (var.id == static_cast<IdentExpr *>(expr)->text) {
                    found = true;
                    expr->genProgramCode();
                    break;
                }
            }

            if (!found) {
                throw SemError("Not declared variable");
            }

            code += expr->code;
            code += "\n\tmov eax, 1\t";
            code += "\n\tmov ebx, " + expr->place + "\t";
            break;

        case CadenaExpr_kind:
        case CaracterExpr_kind:
            expr->genProgramCode();
            code += "\n\tmov esi, 0x10000000\t";
            code += "\n\tlea ebx, [esi+4]\t";

            for (index = 0; static_cast<CadenaExpr *>(expr)->cadena[index] != '\0'; ++index) {
                if (index % 4 == 0) {
                    code += "\n\tmov [ebx + " + std::to_string(index) + "], 0x";
                }

                ss << std::hex << std::setw(2) << std::setfill('0') << static_cast<int>(static_cast<CadenaExpr *>(expr)->cadena[index]);

                if (index >= 0 && (index - 3) % 4 == 0 || index == static_cast<CadenaExpr *>(expr)->cadena.size() - 1) {
                    std::vector<std::string> pairs;

                    for (size_t i = 0; i < ss.str().length(); i += 2) {
                        pairs.push_back(ss.str().substr(i, 2));
                    }

                    std::reverse(pairs.begin(), pairs.end());

                    std::ostringstream result;
                    for (const auto& pair : pairs) {
                        result << pair;
                    }

                    code += result.str();
                    ss.str("");
                }
            }

            code += "\n\tmov [ebx +" + std::to_string(index) + "], 0\t";
            code += "\n\tmov eax, 4\t";
            code += "\n\tlea ebx, [esi+4]\t";
            break;

        case BooleanExpr_kind:
            expr->genProgramCode();
            code += "\n\tmov esi, 0x10000000\t";
            code += "\n\tlea ebx, [esi+4]\t";

            if (expr->place == "1") {
                code += "\n\tmov dword [ebx], 0x45445256\t"; // "VERD" en hexadecimal
                code += "\n\tmov dword [ebx + 4], 0x52454441\t"; // "ADER" en hexadecimal
                code += "\n\tmov dword [ebx + 8], 0x4F\t"; // "O" en hexadecimal
                code += "\n\tmov dword [ebx + 9], 0\t";
            } else {
                code += "\n\tmov dword [ebx], 0x534C4146\t"; // "FALS" en hexadecimal
                code += "\n\tmov dword [ebx + 4], 0x4F\t"; // "O" en hexadecimal
                code += "\n\tmov dword [ebx + 5], 0\t";
            }

            code += "\n\tmov eax, 4\t";
            code += "\n\tlea ebx, [esi+4]\t";
            break;

        default:
            expr->genProgramCode();
            code += expr->code;
            code += "\n\tmov eax, 1\t";
            code += "\n\tmov ebx, " + expr->place + "\t";
            break;
    }

    // Llamada al sistema para imprimir
    code += "\n\tint 0x80\t";

    // Imprimir un salto de línea
    code += "\n\tmov eax, 11\t";
    code += "\n\tmov ebx, 10\t";
    code += "\n\tint 0x80\t";

    return code;
}

genProgramCode(IfStmt) {

    // Generar el código para la condición
    code += cond->genProgramCode();
    
    // Crear etiquetas únicas para las ramas true y false
    std::string etiqueta_true = create_unique_label(this, "if_true_");
    std::string etiqueta_end = create_unique_label(this, "if_end_");

    code += "\n\n\t; IfStmt";
    code += "\n\tcmp " + cond->place + ", 0";
    code += "\n\tje " + etiqueta_true;

    // Generar el código para la rama verdadera
    code += stmt_true->genProgramCode();
    code += "\n\tjmp " + etiqueta_end;

    // Generar el código para la rama falsa
    code += "\n\n" + etiqueta_true + ":";
    code += stmt_false->genProgramCode();

    code += "\n\n" + etiqueta_end + ":";

    return code;
}


genProgramCode(WhileStmt) {
    std::string etiqueta_1 = create_unique_label(this, "while_stmt_1");
    std::string etiqueta_2 = create_unique_label(this, "while_stmt_2");


    code += "\n\n; WhileStmt";
    code += "\n" + etiqueta_1 + ":";
    code += cond->genProgramCode();
    code += "\n\tcmp " + cond->place + ", 0";
    code += "\n\tje " + etiqueta_2;
    code += stmt->genProgramCode();
    code += "\n\tjmp " + etiqueta_1;

    code += "\n\n\t" + etiqueta_2 + ":";
    

    return code;
}

genProgramCode(RepitaStmt) {
    std::string etiqueta_1 = create_unique_label(this, "repita_stmt_1");
    std::string etiqueta_2 = create_unique_label(this, "repita_stmt_2");

    code += "\n\n; RepitaStmt";
    code += "\n" + etiqueta_1 + ":";
    code += stmt->genProgramCode();
    code += cond->genProgramCode();
    code += "\n\tcmp " + cond->place + ", 1";
    code += "\n\tje " + etiqueta_2;
    code += "\n\tjmp " + etiqueta_1;

    code += "\n\n\t" + etiqueta_2 + ":";

    return code;
}

genProgramCode(ForStmt) {
    
    std::string etiqueta_1 = create_unique_label(this, "for_stmt_1");
    std::string etiqueta_2 = create_unique_label(this, "for_stmt_2");
    
    code += init->genProgramCode();
    limite->genProgramCode();
    
    code += "\n\n\t; ForStmt";
    code += "\n" + etiqueta_1 + ":";
    code += "\n\tmov eax, " + init->place;
    code += "\n\tcmp eax, " + limite->place;

    code += "\n\tjg " + etiqueta_2;
    code += stmt->genProgramCode();

    code += "\n\n\t; Incremento de la variable de control";
    code += "\n\tadd " + init->place + ", 1";
    code += "\n\tjmp " + etiqueta_1;

    code += "\n\n" + etiqueta_2 + ":";

    return code;
}

genProgramCode(AddExpr) {
    place = "dword[ebp - " + std::to_string(addOffsetNeg()) + "]";

    code += expr1->genProgramCode();
    code += expr2->genProgramCode();

    code += "\n\n\t; Suma";
    code += "\n\tmov eax, " + expr1->place;
    code += "\n\tadd eax, " + expr2->place;
    code += "\n\tmov " + place + ", eax";
    
    return code;
}

genProgramCode(SubExpr) {
    place = "dword[ebp - " + std::to_string(addOffsetNeg()) + "]";

    code += expr1->genProgramCode();
    code += expr2->genProgramCode();

    code += "\n\n\t; Resta";
    code += "\n\tmov eax, " + expr1->place;
    code += "\n\tsub eax, " + expr2->place;
    code += "\n\tmov " + place + ", eax";

    return code;
}

genProgramCode(MultExpr) {
    place = "dword[ebp - " + std::to_string(addOffsetNeg()) + "]";

    code += expr1->genProgramCode();
    code += expr2->genProgramCode();

    code += "\n\n\t; Multiplicación";
    code += "\n\tmov eax, " + expr1->place;
    code += "\n\timul eax, " + expr2->place;
    code += "\n\tmov " + place + ", eax";

    return code;
}

genProgramCode(EqualExpr) {
    place = "dword[ebp - " + std::to_string(addOffsetNeg()) + "]";

    std::string etiqueta_1 = create_unique_label(this, "eq_expr_1");
    std::string etiqueta_2 = create_unique_label(this, "eq_expr_2");

    code += expr1->genProgramCode();
    code += expr2->genProgramCode();

    code += "\n\n\t; Equal expr";
    code += "\n\tmov eax, " + expr1->place;
    code += "\n\tcmp eax, " + expr2->place;
    code += "\n\tje " + etiqueta_1;
    code += "\n\tmov eax, 0";
    code += "\n\tjmp " + etiqueta_2;

    code += "\n\n" + etiqueta_1 + ":";
    code += "\n\tmov eax, 1";
    code += "\n\n" + etiqueta_2 + ":";
    code += "\n\tmov " + place + ", eax";

    return code;
}


genProgramCode(LessOrEqualExpr) {
    place = "dword[ebp - " + std::to_string(addOffsetNeg()) + "]";

    std::string etiqueta_1 = create_unique_label(this, "less_eq_expr_1");
    std::string etiqueta_2 = create_unique_label(this, "less_eq_expr_2");

    code += expr1->genProgramCode();
    code += expr2->genProgramCode();

    code += "\n\n\t; LessOrEqual expr";
    code += "\n\tmov eax, " + expr1->place;
    code += "\n\tcmp eax, " + expr2->place;
    code += "\n\tjle " + etiqueta_1;
    code += "\n\tmov eax, 0";
    code += "\n\tjmp " + etiqueta_2;

    code += "\n\n" + etiqueta_1 + ":";
    code += "\n\tmov eax, 1";
    code += "\n\n" + etiqueta_2 + ":";
    code += "\n\tmov " + place + ", eax";

    return code;
}

genProgramCode(LessExpr) {
    place = "dword[ebp - " + std::to_string(addOffsetNeg()) + "]";

    std::string etiqueta_1 = create_unique_label(this, "less_expr_1");
    std::string etiqueta_2 = create_unique_label(this, "less_expr_2");

    code += expr1->genProgramCode();
    code += expr2->genProgramCode();

    code += "\n\n\t; Less expr";
    code += "\n\tmov eax, " + expr1->place;
    code += "\n\tcmp eax, " + expr2->place;
    code += "\n\tjl " + etiqueta_1;
    code += "\n\tmov eax, 0";
    code += "\n\tjmp " + etiqueta_2;

    code += "\n\n" + etiqueta_1 + ":";
    code += "\n\tmov eax, 1";
    code += "\n\n" + etiqueta_2 + ":";
    code += "\n\tmov " + place + ", eax";

    return code;
}

genProgramCode(GreaterOrEqualExpr) {
    place = "dword[ebp - " + std::to_string(addOffsetNeg()) + "]";

    std::string etiqueta_1 = create_unique_label(this, "ge_expr_1");
    std::string etiqueta_2 = create_unique_label(this, "ge_expr_2");

    code += expr1->genProgramCode();
    code += expr2->genProgramCode();

    code += "\n\n\t; GreaterOrEqual expr";
    code += "\n\tmov eax, " + expr1->place;
    code += "\n\tcmp eax, " + expr2->place;
    code += "\n\tjge " + etiqueta_1;
    code += "\n\tmov eax, 0";
    code += "\n\tjmp " + etiqueta_2;

    code += "\n\n" + etiqueta_1 + ":";
    code += "\n\tmov eax, 1";
    code += "\n\n" + etiqueta_2 + ":";
    code += "\n\tmov " + place + ", eax";

    return code;
}

genProgramCode(GreaterExpr) {
    place = "dword[ebp - " + std::to_string(addOffsetNeg()) + "]";

    std::string etiqueta_1 = create_unique_label(this, "greater_expr_1");
    std::string etiqueta_2 = create_unique_label(this, "greater_expr_2");

    code += expr1->genProgramCode();
    code += expr2->genProgramCode();

    code += "\n\n\t; Greater expr";
    code += "\n\tmov eax, " + expr1->place;
    code += "\n\tcmp eax, " + expr2->place;
    code += "\n\tjg " + etiqueta_1;
    code += "\n\tmov eax, 0";
    code += "\n\tjmp " + etiqueta_2;

    code += "\n\n" + etiqueta_1 + ":";
    code += "\n\tmov eax, 1";
    code += "\n\n" + etiqueta_2 + ":";
    code += "\n\tmov " + place + ", eax";

    return code;
}

genProgramCode(NotEqualExpr) {
    place = "dword[ebp - " + std::to_string(addOffsetNeg()) + "]";

    std::string etiqueta_1 = create_unique_label(this, "not_equal_expr_1");
    std::string etiqueta_2 = create_unique_label(this, "not_equal_expr_2");

    code += expr1->genProgramCode();
    code += expr2->genProgramCode();

    code += "\n\n\t; NotEqual expr";
    code += "\n\tmov eax, " + expr1->place;
    code += "\n\tcmp eax, " + expr2->place;
    code += "\n\tjne " + etiqueta_1;
    code += "\n\tmov eax, 0";
    code += "\n\tjmp " + etiqueta_2;

    code += "\n\n" + etiqueta_1 + ":";
    code += "\n\tmov eax, 1";
    code += "\n\n" + etiqueta_2 + ":";
    code += "\n\tmov " + place + ", eax";

    return code;
}

genProgramCode(AndExpr) {
    place = "dword[ebp - " + std::to_string(addOffsetNeg()) + "]";

    code += expr1->genProgramCode();
    code += expr2->genProgramCode();

     code += "\n\t; And expr";
    code += "\n\tmov eax, " + expr1->place;
    code += "\n\tand eax, " + expr2->place;
    code += "\n\tmov " + place + ", eax";

    return code;
}

genProgramCode(OrExpr) {
    place = "dword[ebp - " + std::to_string(addOffsetNeg()) + "]";

    code += expr1->genProgramCode();
    code += expr2->genProgramCode();

    code += "\n\n\t; Or expr";
    code += "\n\tmov eax, " + expr1->place;
    code += "\n\tor eax, " + expr2->place;
    code += "\n\tmov " + place + ", eax";

    return code;
}


// REVISAR
genProgramCode(ModExpr) {
    place = "dword[ebp - " + std::to_string(addOffsetNeg()) + "]";

    code += expr1->genProgramCode();
    code += expr2->genProgramCode();

    code += "\n\n\t; Mod expr";
    code += "\n\tmov eax, " + expr1->place;
    code += "\n\tcdq";
    code += "\n\tidiv " + expr2->place;
    code += "\n\tmov " + place + ", edx";
    code += "\n\tmov eax, edx";

    return code;
}

// REVISAR
genProgramCode(DivExpr) {
    place = "dword[ebp - " + std::to_string(addOffsetNeg()) + "]";

    code += expr1->genProgramCode();
    code += expr2->genProgramCode();

    code += "\n\n\t; Div expr";
    code += "\n\tmov eax, " + expr1->place;
    code += "\n\tcdq";
    code += "\n\tmov ebx, " + expr2->place;
    code += "\n\tidiv ebx";
    code += "\n\tmov " + place + ", eax";

    return code;
}

genProgramCode(DecVarStmt) {
    code += var1->genProgramCode();
    code += var2->genProgramCode();

    return code;
}

genProgramCode(IntDecl) {
    code += var1->genProgramCode();
    code += var2->genProgramCode();
    
    return code;
}

genProgramCode(NumExpr) {
    place = std::to_string(value);
    code = "";
    return code;
}

genProgramCode(BooleanExpr) {
    place = std::to_string(value);
    code = "";
    return code;
}

genProgramCode(IdentExpr) {

    bool found = false;
    for (auto &element : vec) {
        if (element.id == text) {
            place = element.placeStack;
            found = true;
            break;
        }
    }
    
    if (!found) {
        place = "dword[ebp + " + std::to_string(addOffset()) + "]";
        vec.push_back({text, place});
    }

    return code;
}

genProgramCode(CadenaExpr) {
    place = cadena;

    return code;
}

genProgramCode(CaracterExpr) {
    place = caracter;

    return code;
}

genProgramCode(Program) {

    stmts->genProgramCode();

    for (auto &element : vec) {
        code += "\n\tpush 0";
    }
    code += "\n\tcall inicio";
    code += "\n\tadd esp, " + std::to_string(offset-4);
    // code += "\n\tmov eax, 1";
    // code += "\n\tint 0x80";
    code += "\n\t#stop";

    code += "\n\ninicio:";
    code += "\n\tpush ebp";
    code += "\n\tmov ebp, esp";
    code += "\n\tsub esp, " + std::to_string(offsetNeg);

    code += stmts->code;

    code += "\n\n\tmov esp, ebp";
    code += "\n\tpop ebp";
    code += "\n\tret";


    // print the vector.
    for (auto &element : vec) {
        std::cout << "ID: " << element.id << " PLACE: " << element.placeStack << std::endl;
    }

    return code;
}


// Empty node.
genProgramCode(EmptyNode) {
    return code;
}

