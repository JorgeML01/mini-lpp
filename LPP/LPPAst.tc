%{
#include <iostream>
#include "LPPAst.hpp"
%}

%decls %{
#include <string>
#include <unordered_map>
#include <variant>
#include "SemError.hpp"

using stdstring = std::string;
using Value = std::variant<bool, double>;
using SymbolTable = std::unordered_map<std::string, Value>;

%}

%option lang = "C++"


// NODOS.
%node AstNode %abstract %typedef

// STATEMENT NODES.
%node Stmt AstNode %abstract

%node BlockStmt Stmt = {
    AstNode* stmt1;
    AstNode* stmt2;
}


%node AssignStmt Stmt = {
    AstNode *var;
    AstNode *rvalue;
}

%node PrintStmt Stmt = {
    AstNode *expr;
}

%node IfStmt Stmt = {
    AstNode *cond;
    AstNode *stmt_t; // true
    AstNode *stmt_f; // false
}

%node WhileStmt Stmt = {
    AstNode *cond;
    AstNode *stmt;
}

%node ForStmt Stmt = {
    AstNode *init;
    AstNode *cond;
    AstNode *inc;
    AstNode *stmt;
}

%node BinaryExpr AstNode %abstract = {
    AstNode *expr1;
    AstNode *expr2;
}

%node AddExpr BinaryExpr
%node SubExpr BinaryExpr
%node MultExpr BinaryExpr
%node NotEqualExpr BinaryExpr
%node EqualExpr BinaryExpr
%node LessOrEqualExpr BinaryExpr
%node LessExpr BinaryExpr          
%node GreaterOrEqualExpr BinaryExpr 
%node GreaterExpr BinaryExpr


%node NumExpr AstNode = {
    double value; // Estos valores que pongo aquí son para el constructor.
                  // Va a tener un double como atributo de clase.
}

%node IdentExpr AstNode = {
    stdstring text; // Va a tener un string como atributo de clase.
}


// OPERACIONES.
%operation %virtual Value eval(AstNode *this, SymbolTable& symb_tbl) // Función eval que retorna un Value.


// Prácticamente es para obtener el valor del nodo.
eval(AddExpr) {
    Value v1 = expr1->eval(symb_tbl);
    Value v2 = expr2->eval(symb_tbl);

    if (!std::holds_alternative<double>(v1) || !std::holds_alternative<double>(v2)) {
        throw SemError("Operator + only aplicable to double");
    }

    return std::get<double>(v1) + std::get<double>(v2);
}

eval(SubExpr) {
    Value v1 = expr1->eval(symb_tbl);
    Value v2 = expr2->eval(symb_tbl);

    if (!std::holds_alternative<double>(v1) || !std::holds_alternative<double>(v2)) {
        throw SemError("Operator - only aplicable to double");
    }

    return std::get<double>(v1) - std::get<double>(v2);
}

eval(MultExpr) {
    Value v1 = expr1->eval(symb_tbl);
    Value v2 = expr2->eval(symb_tbl);

    if (!std::holds_alternative<double>(v1) || !std::holds_alternative<double>(v2)) {
        throw SemError("Operator * only aplicable to double");
    }

    return std::get<double>(v1) * std::get<double>(v2);
}

eval(EqualExpr) {
    Value v1 = expr1->eval(symb_tbl);
    Value v2 = expr2->eval(symb_tbl);

    if (!std::holds_alternative<double>(v1) || !std::holds_alternative<double>(v2)) {
        throw SemError("Operator == only aplicable to double");
    }

    return std::get<double>(v1) == std::get<double>(v2);
}

eval(NotEqualExpr) {
    Value v1 = expr1->eval(symb_tbl);
    Value v2 = expr2->eval(symb_tbl);

    if (!std::holds_alternative<double>(v1) || !std::holds_alternative<double>(v2)) {
        throw SemError("Operator != only aplicable to double");
    }

    return std::get<double>(v1) != std::get<double>(v2);
}

eval(LessOrEqualExpr) {
    Value v1 = expr1->eval(symb_tbl);
    Value v2 = expr2->eval(symb_tbl);

    if (!std::holds_alternative<double>(v1) || !std::holds_alternative<double>(v2)) {
        throw SemError("Operator <= only aplicable to double");
    }

    return std::get<double>(v1) <= std::get<double>(v2);
}

eval(LessExpr) {
    Value v1 = expr1->eval(symb_tbl);
    Value v2 = expr2->eval(symb_tbl);

    if (!std::holds_alternative<double>(v1) || !std::holds_alternative<double>(v2)) {
        throw SemError("Operator < only aplicable to double");
    }

    return std::get<double>(v1) < std::get<double>(v2);
}

eval(GreaterOrEqualExpr) {
    Value v1 = expr1->eval(symb_tbl);
    Value v2 = expr2->eval(symb_tbl);

    if (!std::holds_alternative<double>(v1) || !std::holds_alternative<double>(v2)) {
        throw SemError("Operator >= only aplicable to double");
    }

    return std::get<double>(v1) >= std::get<double>(v2);
}

eval(GreaterExpr) {
    Value v1 = expr1->eval(symb_tbl);
    Value v2 = expr2->eval(symb_tbl);

    if (!std::holds_alternative<double>(v1) || !std::holds_alternative<double>(v2)) {
        throw SemError("Operator > only aplicable to double");
    }

    return std::get<double>(v1) > std::get<double>(v2);
}

eval(NumExpr) {
    return value;
}

eval(IdentExpr) {
    auto it = symb_tbl.find(text);
    if (it == symb_tbl.end()) {
        throw SemError("Variable " + text + " has not been declared");
    }

    return it->second;
}

eval(AssignStmt) {
    Value v = rvalue->eval(symb_tbl);
    symb_tbl[reinterpret_cast<IdentExpr*>(var)->text] = v;
    return {};
}

eval(PrintStmt) {
    Value v = expr->eval(symb_tbl);

    if (std::holds_alternative<bool>(v)) {
        std::cout << (std::get<bool>(v) ? "true" : "false") << "\n";
    } else {
        std::cout << std::get<double>(v) << "\n";
    }
    return {};
}

eval(IfStmt) {
    Value v = cond->eval(symb_tbl);

    if (!std::holds_alternative<bool>(v)) {
        throw SemError("Condition must be a boolean");
    }

    if (std::get<bool>(v)) {
        stmt_t->eval(symb_tbl);
    } else {
        stmt_f->eval(symb_tbl);
    }
    return {};
}

eval(WhileStmt) {
    Value v = cond->eval(symb_tbl);

    if (!std::holds_alternative<bool>(v)) {
        throw SemError("Condition must be a boolean");
    }

    while (std::get<bool>(v)) {
        stmt->eval(symb_tbl);
        v = cond->eval(symb_tbl);
        std::cout << "STATEMENT" << "\n";
    }

    return {};
}

eval(ForStmt) {
    init->eval(symb_tbl); // Execute the initialization statement
    Value v = cond->eval(symb_tbl);

    while (std::get<bool>(v)) {
        stmt->eval(symb_tbl);
        inc->eval(symb_tbl);
        v = cond->eval(symb_tbl);
    }
    return {};
}

eval(BlockStmt) {
    stmt1->eval(symb_tbl);
    stmt2->eval(symb_tbl);
    return {};
}

